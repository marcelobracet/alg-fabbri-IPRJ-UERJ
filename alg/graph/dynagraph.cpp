/*
 * =====================================================================================
 * 
 *        Filename:  dynagraph.cpp
 * 
 *     Description:  C++ implementation of completely dynamic graph representation
 *                   Using OOP with classes, constructors, and destructors
 * 
 *         Version:  2.0
 *         Created:  2025
 *        Compiler:  g++
 * 
 *          Author:  Based on Ricardo Fabbri's dynagraph.c
 *                   Converted to C++ with OOP
 *         Company:  IPRJ/UERJ
 * 
 * =====================================================================================
 */

#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <algorithm>
#include <memory>

// =====================================================================================
// Classe Node - Representa um n√≥ do grafo
// =====================================================================================
class Node {
public:
    // Estrutura para representar uma conex√£o (aresta)
    struct Connection {
        Node* node;      // Ponteiro para o n√≥ conectado
        int weight;      // Peso da conex√£o
        
        Connection(Node* n, int w) : node(n), weight(w) {}
    };
    
private:
    std::string name;                    // Nome do n√≥
    std::list<Connection> connections;   // Lista de conex√µes (adjac√™ncias)
    
public:
    // Construtor
    explicit Node(const std::string& nodeName) : name(nodeName) {
        std::cout << "[Constructor] N√≥ '" << name << "' criado" << std::endl;
    }
    
    // Destrutor
    ~Node() {
        std::cout << "[Destructor] N√≥ '" << name << "' destru√≠do" << std::endl;
        // A lista de conex√µes √© automaticamente limpa (RAII)
    }
    
    // Getters
    const std::string& getName() const { return name; }
    const std::list<Connection>& getConnections() const { return connections; }
    std::list<Connection>& getConnections() { return connections; }
    
    // Setter
    void setName(const std::string& newName) { name = newName; }
    
    // Adiciona uma conex√£o a este n√≥
    void addConnection(Node* targetNode, int weight) {
        connections.emplace_back(targetNode, weight);
    }
    
    // Remove uma conex√£o espec√≠fica para um n√≥
    void removeConnection(Node* targetNode) {
        connections.remove_if([targetNode](const Connection& conn) {
            return conn.node == targetNode;
        });
    }
    
    // Remove todas as conex√µes
    void clearConnections() {
        connections.clear();
    }
    
    // Imprime as conex√µes deste n√≥
    void printConnections() const {
        std::cout << "Conex√µes de " << name << ":" << std::endl;
        for (const auto& conn : connections) {
            std::cout << "  -> " << conn.node->getName() 
                      << " (peso " << conn.weight << ")" << std::endl;
        }
    }
};

// =====================================================================================
// Classe Graph - Representa o grafo completo
// =====================================================================================
class Graph {
private:
    std::vector<Node*> nodes;  // Lista de n√≥s do grafo
    
    // M√©todo auxiliar para verificar se um n√≥ j√° foi visitado
    bool isVisited(const std::vector<Node*>& visited, Node* node) const {
        return std::find(visited.begin(), visited.end(), node) != visited.end();
    }
    
    // M√©todo recursivo para calcular componente conexo
    int componenteConexoRecursive(Node* node, int maxWeight, 
                                  std::vector<Node*>& visited) {
        if (!node) return 0;
        
        visited.push_back(node);
        int totalWeight = 0;
        
        for (auto& conn : node->getConnections()) {
            // Filtro por peso m√°ximo
            if (conn.weight >= maxWeight)
                continue;
                
            // Se o n√≥ ainda n√£o foi visitado
            if (!isVisited(visited, conn.node)) {
                totalWeight += conn.weight + 
                              componenteConexoRecursive(conn.node, maxWeight, visited);
            }
        }
        
        return totalWeight;
    }
    
public:
    // Construtor
    Graph() {
        std::cout << "[Constructor] Grafo criado" << std::endl;
    }
    
    // Destrutor - libera todos os n√≥s
    ~Graph() {
        std::cout << "[Destructor] Grafo sendo destru√≠do..." << std::endl;
        for (Node* node : nodes) {
            delete node;
        }
        nodes.clear();
    }
    
    // Adiciona um n√≥ ao grafo
    Node* addNode(const std::string& name) {
        Node* newNode = new Node(name);
        nodes.push_back(newNode);
        return newNode;
    }
    
    // Liga dois n√≥s (grafo n√£o-direcionado)
    void connect(Node* nodeA, Node* nodeB, int weight) {
        if (!nodeA || !nodeB) {
            std::cerr << "Erro: Tentando conectar n√≥s nulos!" << std::endl;
            return;
        }
        
        nodeA->addConnection(nodeB, weight);
        nodeB->addConnection(nodeA, weight);  // Grafo n√£o-direcionado
    }
    
    // Deleta um n√≥ do grafo (remove todas as conex√µes)
    void deleteNode(Node* node) {
        if (!node) return;
        
        std::cout << "\nüóëÔ∏è  Deletando n√≥: " << node->getName() << std::endl;
        
        // Remove conex√µes dos vizinhos para este n√≥
        for (auto& conn : node->getConnections()) {
            conn.node->removeConnection(node);
        }
        
        // Limpa as conex√µes do pr√≥prio n√≥
        node->clearConnections();
        
        // Remove o n√≥ da lista do grafo
        auto it = std::find(nodes.begin(), nodes.end(), node);
        if (it != nodes.end()) {
            nodes.erase(it);
        }
        
        // Libera a mem√≥ria do n√≥
        delete node;
    }
    
    // Calcula o componente conexo a partir de um n√≥
    int calculateConnectedComponent(Node* startNode, int maxWeight,
                                   std::vector<Node*>& componentNodes) {
        if (!startNode) return -1;
        
        componentNodes.clear();
        return componenteConexoRecursive(startNode, maxWeight, componentNodes);
    }
    
    // Renomeia Friburgo para Nova Friburgo (exemplo espec√≠fico do exerc√≠cio)
    // Dado um ponteiro para Petropolis, navega pelas conex√µes
    void renomearFriburgo(Node* petropolis) {
        if (!petropolis || petropolis->getConnections().empty())
            return;
            
        // Navega: Petropolis -> primeira conex√£o -> primeira conex√£o da segunda conex√£o
        auto& firstConn = petropolis->getConnections().front();
        if (firstConn.node && !firstConn.node->getConnections().empty()) {
            auto it = firstConn.node->getConnections().begin();
            std::advance(it, 1); // Pula para a segunda conex√£o
            if (it != firstConn.node->getConnections().end() && it->node) {
                it->node->setName("Nova Friburgo");
            }
        }
    }
    
    // Imprime todos os n√≥s do grafo
    void printGraph() const {
        std::cout << "\nüìä Grafo completo:" << std::endl;
        std::cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << std::endl;
        for (const Node* node : nodes) {
            node->printConnections();
            std::cout << std::endl;
        }
    }
    
    // Busca um n√≥ pelo nome
    Node* findNode(const std::string& name) const {
        auto it = std::find_if(nodes.begin(), nodes.end(),
            [&name](const Node* node) {
                return node->getName() == name;
            });
        return (it != nodes.end()) ? *it : nullptr;
    }
    
    // Retorna o n√∫mero de n√≥s
    size_t getNodeCount() const { return nodes.size(); }
};

// =====================================================================================
// Fun√ß√£o Main - Testa o grafo
// =====================================================================================
int main() {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë  DynaGraph C++ - Grafos com OOP           ‚ïë" << std::endl;
    std::cout << "‚ïë  Vers√£o 2.0 - IPRJ/UERJ                   ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n" << std::endl;
    
    // Cria o grafo
    Graph grafo;
    
    // Adiciona os n√≥s (cidades do RJ)
    Node* petropolis  = grafo.addNode("Petropolis");
    Node* teresopolis = grafo.addNode("Teresopolis");
    Node* niteroi     = grafo.addNode("Niteroi");
    Node* rio         = grafo.addNode("Rio");
    Node* friburgo    = grafo.addNode("Friburgo");
    
    std::cout << std::endl;
    
    // Conecta os n√≥s (cria as arestas)
    std::cout << "üîó Criando conex√µes..." << std::endl;
    grafo.connect(petropolis, teresopolis, 50);
    grafo.connect(petropolis, rio, 65);
    grafo.connect(teresopolis, rio, 100);
    grafo.connect(teresopolis, friburgo, 75);
    grafo.connect(niteroi, rio, 15);
    grafo.connect(niteroi, friburgo, 120);
    grafo.connect(rio, friburgo, 140);
    
    // Mostra o estado antes de deletar
    std::cout << "\n" << std::string(50, '=') << std::endl;
    std::cout << "üìç ANTES DE DELETAR O N√ì RIO" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    petropolis->printConnections();
    std::cout << std::endl;
    niteroi->printConnections();
    
    // Deleta o n√≥ Rio
    grafo.deleteNode(rio);
    rio = nullptr; // Importante: evita dangling pointer
    
    // Mostra o estado ap√≥s deletar
    std::cout << "\n" << std::string(50, '=') << std::endl;
    std::cout << "üìç AP√ìS DELETAR O N√ì RIO" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    petropolis->printConnections();
    std::cout << std::endl;
    niteroi->printConnections();
    std::cout << std::endl;
    
    // Renomeia Friburgo
    grafo.renomearFriburgo(petropolis);
    
    // Calcula componente conexo
    std::vector<Node*> componenteNos;
    int pesoTotal = grafo.calculateConnectedComponent(friburgo, 100, componenteNos);
    
    std::cout << "\n" << std::string(50, '=') << std::endl;
    std::cout << "üìä COMPONENTE CONEXO A PARTIR DE FRIBURGO" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    std::cout << "Componente de " << friburgo->getName() 
              << " tem " << componenteNos.size() 
              << " n√≥s e peso total " << pesoTotal << std::endl;
    
    std::cout << "\nN√≥s no componente:" << std::endl;
    for (const Node* node : componenteNos) {
        std::cout << "  ‚Ä¢ " << node->getName() << std::endl;
    }
    
    // Imprime o grafo completo
    grafo.printGraph();
    
    std::cout << "\n" << std::string(50, '=') << std::endl;
    std::cout << "‚úÖ Programa finalizado com sucesso!" << std::endl;
    std::cout << "‚öôÔ∏è  Destrutores ser√£o chamados automaticamente...\n" << std::endl;
    
    // O destrutor do Graph ser√° chamado automaticamente
    // e limpar√° todos os n√≥s restantes (RAII)
    return 0;
}

